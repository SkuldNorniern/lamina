# Test variable operations
fn @main() -> i64 {
  entry:
    %a = add.i64 10, 0
    %b = add.i64 20, 0
    %c = add.i64 %a, %b
    %d = sub.i64 %c, 5
    %e = mul.i64 %d, 2
    %dummy1 = call @print_number(%a)  # 10
    %newline1 = writebyte 10
    %dummy2 = call @print_number(%b)  # 20
    %newline2 = writebyte 10
    %dummy3 = call @print_number(%c)  # 30
    %newline3 = writebyte 10
    %dummy4 = call @print_number(%d)  # 25
    %newline4 = writebyte 10
    %dummy5 = call @print_number(%e)  # 50
    %newline5 = writebyte 10
    ret.i64 0
}

# Helper function to print multi-digit numbers
fn @print_number(i64 %num) -> i64 {
  entry:
    # Handle zero case
    %is_zero = eq.i64 %num, 0
    br %is_zero, print_zero, check_negative

  check_negative:
    %is_negative = lt.i64 %num, 0
    br %is_negative, handle_negative, print_digits

  print_zero:
    %zero = writebyte 48  # '0'
    ret.i64 0

  handle_negative:
    %minus = writebyte 45  # '-'
    %abs_num = sub.i64 0, %num
    %dummy = call @print_digits(%abs_num)
    ret.i64 0

  print_digits:
    %dummy = call @print_digits(%num)
    ret.i64 0
}

# Helper function to print digits recursively
fn @print_digits(i64 %num) -> i64 {
  entry:
    %is_zero = eq.i64 %num, 0
    br %is_zero, done, continue_print

  continue_print:
    %divisor = add.i64 0, 10
    %quotient = div.i64 %num, %divisor
    %temp = mul.i64 %quotient, %divisor
    %remainder = sub.i64 %num, %temp

    # Print higher digits first
    %dummy = call @print_digits(%quotient)

    # Print current digit
    %digit = add.i64 %remainder, 48  # ASCII '0'
    %dummy2 = writebyte %digit
    ret.i64 0

  done:
    ret.i64 0
}


# Simple test for basic pointer operations

fn @test_scenario_1() -> i64 {
  entry:
    # Allocate a single i64 on stack
    %ptr = alloc.stack i64
    # Store a value
    store.i64 %ptr, 42
    # Load the value
    %value = load.i64 %ptr
    ret.i64 %value
}

fn @test_scenario_2() -> i64 {
  entry:
    # Test multiple pointers
    %ptr1 = alloc.stack i64
    %ptr2 = alloc.stack i64

    store.i64 %ptr1, 50
    store.i64 %ptr2, 50

    %val1 = load.i64 %ptr1
    %val2 = load.i64 %ptr2
    %sum = add.i64 %val1, %val2
    ret.i64 %sum
}

fn @test_scenario_3() -> i64 {
  entry:
    # Test arithmetic with pointers
    %ptr = alloc.stack i64
    store.i64 %ptr, 500

    %val = load.i64 %ptr
    %result = add.i64 %val, 500
    ret.i64 %result
}

fn @main() -> i64 {
  entry:
    %result1 = call @test_scenario_1()
    %dummy1 = call @print_number(%result1)
    %newline1 = writebyte 10

    %result2 = call @test_scenario_2()
    %dummy2 = call @print_number(%result2)
    %newline2 = writebyte 10

    %result3 = call @test_scenario_3()
    %dummy3 = call @print_number(%result3)
    %newline3 = writebyte 10
    ret.i64 0
}

# Helper function to print multi-digit numbers
fn @print_number(i64 %num) -> i64 {
  entry:
    # Handle zero case
    %is_zero = eq.i64 %num, 0
    br %is_zero, print_zero, check_negative

  check_negative:
    %is_negative = lt.i64 %num, 0
    br %is_negative, handle_negative, print_digits

  print_zero:
    %zero = writebyte 48  # '0'
    ret.i64 0

  handle_negative:
    %minus = writebyte 45  # '-'
    %abs_num = sub.i64 0, %num
    %dummy = call @print_digits(%abs_num)
    ret.i64 0

  print_digits:
    %dummy = call @print_digits(%num)
    ret.i64 0
}

# Helper function to print digits recursively
fn @print_digits(i64 %num) -> i64 {
  entry:
    %is_zero = eq.i64 %num, 0
    br %is_zero, done, continue_print

  continue_print:
    %divisor = add.i64 0, 10
    %quotient = div.i64 %num, %divisor
    %temp = mul.i64 %quotient, %divisor
    %remainder = sub.i64 %num, %temp

    # Print higher digits first
    %dummy = call @print_digits(%quotient)

    # Print current digit
    %digit = add.i64 %remainder, 48  # ASCII '0'
    %dummy2 = writebyte %digit
    ret.i64 0

  done:
    ret.i64 0
}
